// Code generated by "stringer -type TokenType token.go"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[LET-0]
	_ = x[IDENT-1]
	_ = x[ASSIGN-2]
	_ = x[INT-3]
	_ = x[SEMICOLON-4]
	_ = x[FUNCTION-5]
	_ = x[LPAREN-6]
	_ = x[COMMA-7]
	_ = x[RPAREN-8]
	_ = x[LBRACE-9]
	_ = x[PLUS-10]
	_ = x[RBRACE-11]
	_ = x[BANG-12]
	_ = x[MINUS-13]
	_ = x[SLASH-14]
	_ = x[ASTERISK-15]
	_ = x[LT-16]
	_ = x[LE-17]
	_ = x[GT-18]
	_ = x[GE-19]
	_ = x[IF-20]
	_ = x[RETURN-21]
	_ = x[TRUE-22]
	_ = x[ELSE-23]
	_ = x[FALSE-24]
	_ = x[STRING-25]
	_ = x[EQ-26]
	_ = x[NOT_EQ-27]
	_ = x[INVALID-28]
	_ = x[BLOCK-29]
	_ = x[EOF-30]
	_ = x[NIL-31]
	_ = x[RUNE-32]
}

const _TokenType_name = "LETIDENTASSIGNINTSEMICOLONFUNCTIONLPARENCOMMARPARENLBRACEPLUSRBRACEBANGMINUSSLASHASTERISKLTLEGTGEIFRETURNTRUEELSEFALSESTRINGEQNOT_EQINVALIDBLOCKEOFNILRUNE"

var _TokenType_index = [...]uint8{0, 3, 8, 14, 17, 26, 34, 40, 45, 51, 57, 61, 67, 71, 76, 81, 89, 91, 93, 95, 97, 99, 105, 109, 113, 118, 124, 126, 132, 139, 144, 147, 150, 154}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
